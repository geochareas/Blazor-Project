@using BlazorApp.Shared.Services

@rendermode InteractiveAuto

@inject HttpClient Http
@inject NavigationManager Navigation

@inject ICustomerService CustomerService

@if (isLoading)
{
    <div class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (pagedResult is null || !pagedResult.Items.Any())
{
    <div class="alert alert-info">No customers found.</div>
}
else
{
    <table class="table table-striped table-bordered">
        <thead class="table-light">
            <tr>
                <th>Id</th>
                <th>Company Name</th>
                <th>Contact Name</th>
                <th>Address</th>
                <th>City</th>
                <th>Region</th>
                <th>Postal Code</th>
                <th>Country</th>
                <th>Phone</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var customer in pagedResult.Items ?? Enumerable.Empty<Customer>())
            {
                <tr>
                    <td>@customer.Id</td>
                    <td>@customer.CompanyName</td>
                    <td>@customer.ContactName</td>
                    <td>@customer.Address</td>
                    <td>@customer.City</td>
                    <td>@customer.Region</td>
                    <td>@customer.PostalCode</td>
                    <td>@customer.Country</td>
                    <td>@customer.Phone</td>
                </tr>
            }
        </tbody>
    </table>

    <nav>
        <ul class="pagination justify-content-center">
            <li class="page-item @(pagedResult.HasPreviousPage ? "" : "disabled")">
                <button class="page-link" @onclick="PrevPage">Previous</button>
            </li>

            @for (int i = 1; i <= pagedResult.TotalPages; i++)
            {
                var pageNumber = i;
                <li class="page-item @(i == currentPage ? "active" : "")">
                    <button class="page-link" @onclick="() => GoToPage(pageNumber)">@pageNumber</button>
                </li>
            }

            <li class="page-item @(pagedResult.HasNextPage ? "" : "disabled")">
                <button class="page-link" @onclick="NextPage">Next</button>
            </li>
        </ul>
    </nav>
}
<style>
    .pagination {
    margin-top: 1rem;
    }

    .pagination button {
    margin: 0 3px;
    padding: 5px 10px;
    }

    .active-page {
    font-weight: bold;
    text-decoration: underline;
    }
</style>

@code {
    [Parameter]
    public int Page { get; set; } = 1;

    private PagedResult<Customer>? pagedResult;  
    private int currentPage = 1;
    private int pageSize = 10;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        currentPage = Page;
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        currentPage = Page <= 0 ? 1 : Page;
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged(); // ensures UI shows the spinner

        pagedResult = await CustomerService.GetPagedAsync(currentPage, pageSize);

        isLoading = false;

    }

    private async Task GoToPage(int page)
    {
        currentPage = page;

        var uri = Navigation.GetUriWithQueryParameter("page", currentPage);
        Navigation.NavigateTo(uri, forceLoad: false); // change URL without reload

        await LoadData();
    }

    private async Task NextPage()
    {
        if (pagedResult?.HasNextPage == true)
        {
            currentPage++;
            await LoadData();
        }
    }

    private async Task PrevPage()
    {
        if (pagedResult?.HasPreviousPage == true)
        {
            currentPage--;
            await LoadData();
        }
    }
}